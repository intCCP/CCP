CREATE OR REPLACE PACKAGE BODY MCRE_OWN.PKG_MCRE0_CHECK_ENGINE AS

/******************************************************************************
   NAME:       PKG_MCRE0_CHECK_ENGINE
   PURPOSE:    Engine controlli automatici

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        22/11/2012  A.Pilloni        Created this package.
   2.0        04/12/2012  A.Pilloni        Change request.
   2.1        13/02/2013  A.Pilloni        Funzionalità controllo allineamento alert.
   2.2        15/02/2013  A.Pilloni        Funzionalità esecuzione singolo controllo.
   2.3        25/02/2013  A.Pilloni        Funzionalità esecuzione controllo per tipologia di controllo.
   2.4        26/02/2013  A.Pilloni        Funzionalità esecuzione controllo di test.
******************************************************************************/

FUNCTION START_PROCESS (P_DOMAIN T_MCRE0_CHECK_ENGINE_PROCESS.DOMAIN%TYPE) RETURN NUMBER IS
PRAGMA autonomous_transaction;

v_pid NUMBER;

BEGIN

SELECT SEQ_MCRE0_CHECK_ENGINE_PROCESS.NEXTVAL
  INTO v_pid
  FROM DUAL;

INSERT INTO T_MCRE0_CHECK_ENGINE_PROCESS (ID, DOMAIN, DT_START, STATUS)
VALUES (v_pid, P_DOMAIN, SYSDATE, 'PROCESSING');

COMMIT;

RETURN v_pid;

END;


FUNCTION END_PROCESS (P_PID T_MCRE0_CHECK_ENGINE_PROCESS.ID%TYPE) RETURN NUMBER IS
PRAGMA autonomous_transaction;

v_pid NUMBER;

BEGIN

UPDATE T_MCRE0_CHECK_ENGINE_PROCESS
   SET DT_END = SYSDATE,
       STATUS = 'PROCESSED'
  WHERE ID = P_PID;

COMMIT;

RETURN v_pid;

END;


FUNCTION GET_EXP_VALUE_THRESHOLD (P_COD_CHECK T_MCRE0_CHECK_ENGINE_THRESHOLD.COD_CHECK%TYPE, P_COD_THRESHOLD T_MCRE0_CHECK_ENGINE_THRESHOLD.COD_THRESHOLD%TYPE, P_VALUE NUMBER DEFAULT NULL) RETURN NUMBER IS

v_exp_value NUMBER;
v_min_value NUMBER;
v_max_value NUMBER;

BEGIN

IF (P_COD_THRESHOLD = 'CHECK') THEN

SELECT EXP_VALUE
  INTO v_min_value
  FROM T_MCRE0_CHECK_ENGINE_THRESHOLD A
  JOIN T_MCRE0_CHECK_ENGINE_WORK B ON (A.COD_CHECK = B.COD_CHECK)
 WHERE A.COD_THRESHOLD = 'MIN'
   AND B.COD_CHECK = P_COD_CHECK;

SELECT EXP_VALUE
  INTO v_max_value
  FROM T_MCRE0_CHECK_ENGINE_THRESHOLD A
  JOIN T_MCRE0_CHECK_ENGINE_WORK B ON (A.COD_CHECK = B.COD_CHECK)
 WHERE A.COD_THRESHOLD = 'MAX'
   AND B.COD_CHECK = P_COD_CHECK;

IF (P_VALUE BETWEEN v_min_value AND v_max_value) THEN

v_exp_value := 1;

END IF;

ELSE

SELECT EXP_VALUE
  INTO v_exp_value
  FROM T_MCRE0_CHECK_ENGINE_THRESHOLD A
  JOIN T_MCRE0_CHECK_ENGINE_WORK B ON (A.COD_CHECK = B.COD_CHECK)
 WHERE A.COD_THRESHOLD = P_COD_THRESHOLD
   AND B.COD_CHECK = P_COD_CHECK;

END IF;

RETURN v_exp_value;

END;


PROCEDURE WRITE_LOG (P_PID T_MCRE0_CHECK_ENGINE_LOG.PID%TYPE, P_NAME_PROCEDURE T_MCRE0_CHECK_ENGINE_LOG.NAME_PROCEDURE%TYPE, P_LEVEL_LOG T_MCRE0_CHECK_ENGINE_LOG.LEVEL_LOG%TYPE, P_MESSAGE T_MCRE0_CHECK_ENGINE_LOG.MESSAGE%TYPE, P_SQL_CODE T_MCRE0_CHECK_ENGINE_LOG.SQL_CODE%TYPE, P_SQL_MESSAGE T_MCRE0_CHECK_ENGINE_LOG.SQL_MESSAGE%TYPE) IS
PRAGMA autonomous_transaction;

BEGIN

INSERT INTO T_MCRE0_CHECK_ENGINE_LOG (ID, PID, NAME_PROCEDURE, LEVEL_LOG, MESSAGE, SQL_CODE, SQL_MESSAGE, DT_INS)
VALUES (SEQ_MCRE0_CHECK_ENGINE_LOG.NEXTVAL, P_PID, P_NAME_PROCEDURE, P_LEVEL_LOG, P_MESSAGE, P_SQL_CODE, P_SQL_MESSAGE, SYSDATE);

COMMIT;

END;


PROCEDURE WRITE_RESULT (P_PID T_MCRE0_CHECK_ENGINE_RESULT.PID%TYPE, P_DOMAIN T_MCRE0_CHECK_ENGINE_RESULT.DOMAIN%TYPE, P_COD_CHECK T_MCRE0_CHECK_ENGINE_RESULT.COD_CHECK%TYPE, P_ID_DPER T_MCRE0_CHECK_ENGINE_RESULT.ID_DPER%TYPE, P_RET_VALUE T_MCRE0_CHECK_ENGINE_RESULT.RET_VALUE%TYPE, P_RESULT T_MCRE0_CHECK_ENGINE_RESULT.RESULT%TYPE, P_NOTES T_MCRE0_CHECK_ENGINE_RESULT.NOTES%TYPE, P_MOD_WRT_RES T_MCRE0_CHECK_ENGINE_WORK.MOD_WRT_RES%TYPE) IS
PRAGMA autonomous_transaction;

BEGIN

IF (P_MOD_WRT_RES = 'TEST') THEN

INSERT INTO T_MCRE0_CHECK_ENGINE_RES_TEST T (T.PID, T.DOMAIN, T.COD_CHECK, T.ID_DPER, T.RET_VALUE, T.RESULT, T.NOTES, T.DT_INS)
VALUES (P_PID, P_DOMAIN, P_COD_CHECK, P_ID_DPER, P_RET_VALUE, P_RESULT, P_NOTES, SYSDATE);

ELSIF (P_MOD_WRT_RES IN ('INSERT', 'MERGE')) THEN

MERGE INTO T_MCRE0_CHECK_ENGINE_RESULT T
     USING (SELECT P_PID AS PID,
                   P_DOMAIN AS DOMAIN,
                   P_COD_CHECK AS COD_CHECK,
                   P_ID_DPER AS ID_DPER,
                   P_RET_VALUE AS RET_VALUE,
                   P_RESULT AS RESULT,
                   P_NOTES AS NOTES,
                   P_MOD_WRT_RES AS MOD_WRT_RES
              FROM DUAL) SRC ON (T.DOMAIN = SRC.DOMAIN AND T.COD_CHECK = SRC.COD_CHECK AND T.ID_DPER = SRC.ID_DPER AND SRC.MOD_WRT_RES = 'MERGE')
WHEN MATCHED THEN
UPDATE SET T.PID = SRC.PID,
           T.RET_VALUE = SRC.RET_VALUE,
           T.RESULT = SRC.RESULT,
           T.NOTES = SRC.NOTES,
           T.DT_INS = SYSDATE
WHEN NOT MATCHED THEN
INSERT (T.PID, T.DOMAIN, T.COD_CHECK, T.ID_DPER, T.RET_VALUE, T.RESULT, T.NOTES, T.DT_INS)
VALUES (SRC.PID, SRC.DOMAIN, SRC.COD_CHECK, SRC.ID_DPER, SRC.RET_VALUE, SRC.RESULT, SRC.NOTES, SYSDATE);

END IF;


COMMIT;

END;


PROCEDURE MASTER_CHECK (P_PID T_MCRE0_CHECK_ENGINE_PROCESS.ID%TYPE, P_DOMAIN T_MCRE0_CHECK_ENGINE_DOMAIN.DOMAIN%TYPE, P_ID_DPER T_MCRE0_CHECK_ENGINE_RESULT.ID_DPER%TYPE, P_COD_CHECK T_MCRE0_CHECK_ENGINE_WORK.COD_CHECK%TYPE, P_TYPE_CHECK T_MCRE0_CHECK_ENGINE_WORK.TYPE_CHECK%TYPE, P_MOD_WRT_RES T_MCRE0_CHECK_ENGINE_WORK.MOD_WRT_RES%TYPE) IS

v_name        VARCHAR2(100) := c_package || '.MASTER_CHECK';
v_message     VARCHAR2(255);

v_ok          VARCHAR2(2) := PKG_MCRE0_CHECK_ENGINE.c_result_ok;
v_ko          VARCHAR2(2) := PKG_MCRE0_CHECK_ENGINE.c_result_ko;

v_id_dper     T_MCRE0_CHECK_ENGINE_RESULT.ID_DPER%TYPE;

v_ret_value   T_MCRE0_CHECK_ENGINE_RESULT.RET_VALUE%TYPE;
v_result      T_MCRE0_CHECK_ENGINE_RESULT.RESULT%TYPE;
v_notes       T_MCRE0_CHECK_ENGINE_RESULT.NOTES%TYPE;

BEGIN

FOR I IN (SELECT *
            FROM T_MCRE0_CHECK_ENGINE_WORK
           WHERE DOMAIN = P_DOMAIN
             AND FLG_ENABLE = 1
             AND COD_CHECK = NVL(P_COD_CHECK, COD_CHECK)
             AND TYPE_CHECK = NVL(P_TYPE_CHECK, TYPE_CHECK)
        ORDER BY POSITION)

LOOP

BEGIN

v_message := I.COD_CHECK || ' - SET ID_DPER';
WRITE_LOG (P_PID, v_name, c_log_debug, v_message, SQLCODE, SQLERRM);

v_id_dper := TRUNC(SYSDATE - 1);

IF (I.DEF_ID_DPER IS NOT NULL) THEN

SELECT CASE WHEN (I.DEF_ID_DPER = 'P_ID_DPER') THEN NVL(P_ID_DPER, v_id_dper)
            WHEN (I.DEF_ID_DPER = 'SYSDATE') THEN TRUNC(SYSDATE)
            ELSE TO_DATE(I.DEF_ID_DPER, 'DD/MM/YYYY') END
  INTO v_id_dper
  FROM DUAL;

END IF;

v_message := I.COD_CHECK || ' - CHECK FLG_LOCK';
WRITE_LOG (P_PID, v_name, c_log_debug, v_message, SQLCODE, SQLERRM);

IF (I.FLG_LOCK = 0) THEN

v_ko := PKG_MCRE0_CHECK_ENGINE.c_result_warning;

END IF;

v_message := I.COD_CHECK || ' - START';
WRITE_LOG (P_PID, v_name, c_log_debug, v_message, SQLCODE, SQLERRM);

CASE

WHEN (I.TYPE_CHECK = 'CNS') THEN

EXECUTE IMMEDIATE 'BEGIN ' || I.NAME_PACKAGE || '.' || I.NAME_PROCEDURE || ' (:1, :2, :3, :4, :5, :6, :7, :8, :9); END;' USING P_PID, I.COD_CHECK, v_id_dper, OUT v_ret_value, OUT v_result, OUT v_notes, v_ok, v_ko, I.DEF_VIEW;

WHEN (I.TYPE_CHECK = 'ALR') THEN

EXECUTE IMMEDIATE 'BEGIN ' || I.NAME_PACKAGE || '.' || I.NAME_PROCEDURE || ' (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10); END;' USING P_PID, I.COD_CHECK, v_id_dper, OUT v_ret_value, OUT v_result, OUT v_notes, v_ok, v_ko, I.DEF_ID_ALERT, I.DEF_QUERY_ALERT;

ELSE

EXECUTE IMMEDIATE 'BEGIN ' || I.NAME_PACKAGE || '.' || I.NAME_PROCEDURE || ' (:1, :2, :3, :4, :5, :6, :7, :8); END;' USING P_PID, I.COD_CHECK, v_id_dper, OUT v_ret_value, OUT v_result, OUT v_notes, v_ok, v_ko;

END CASE;


v_message := I.COD_CHECK || ' - SNAPSHOT';
WRITE_LOG (P_PID, v_name, c_log_debug, v_message, SQLCODE, SQLERRM);
WRITE_RESULT (P_PID, I.DOMAIN, I.COD_CHECK, v_id_dper, v_ret_value, v_result, v_notes, NVL(P_MOD_WRT_RES, I.MOD_WRT_RES));

v_message := I.COD_CHECK || ' - END';
WRITE_LOG (P_PID, v_name, c_log_debug, v_message, SQLCODE, SQLERRM);

EXCEPTION
      WHEN OTHERS
      THEN

         v_message := I.COD_CHECK || ' - ERROR';
         WRITE_LOG (P_PID, v_name, c_log_error, v_message, SQLCODE, SQLERRM);

END;

END LOOP;


EXCEPTION
      WHEN OTHERS
      THEN

         v_message := P_DOMAIN || ' - ERROR';
         WRITE_LOG (P_PID, v_name, c_log_error, v_message, SQLCODE, SQLERRM);

END;


PROCEDURE START_CHECK (P_DOMAIN T_MCRE0_CHECK_ENGINE_DOMAIN.DOMAIN%TYPE, P_ID_DPER T_MCRE0_CHECK_ENGINE_RESULT.ID_DPER%TYPE DEFAULT NULL, P_COD_CHECK T_MCRE0_CHECK_ENGINE_WORK.COD_CHECK%TYPE DEFAULT NULL, P_TYPE_CHECK T_MCRE0_CHECK_ENGINE_WORK.TYPE_CHECK%TYPE DEFAULT NULL, P_MOD_WRT_RES T_MCRE0_CHECK_ENGINE_WORK.MOD_WRT_RES%TYPE DEFAULT NULL) IS

v_name VARCHAR2(100) := c_package || '.START_CHECK';
v_pid NUMBER;
v_message VARCHAR2(255);

BEGIN

v_pid := START_PROCESS (P_DOMAIN);

v_message := P_DOMAIN || ' - START';
WRITE_LOG (v_pid, v_name, c_log_debug, v_message, SQLCODE, SQLERRM);

MASTER_CHECK (v_pid, P_DOMAIN, P_ID_DPER, P_COD_CHECK, P_TYPE_CHECK, P_MOD_WRT_RES);

v_message := P_DOMAIN || ' - END';
WRITE_LOG (v_pid, v_name, c_log_debug, v_message, SQLCODE, SQLERRM);

v_pid := END_PROCESS (v_pid);

END;


END PKG_MCRE0_CHECK_ENGINE;
/


CREATE SYNONYM MCRE_APP.PKG_MCRE0_CHECK_ENGINE FOR MCRE_OWN.PKG_MCRE0_CHECK_ENGINE;


CREATE SYNONYM MCRE_USR.PKG_MCRE0_CHECK_ENGINE FOR MCRE_OWN.PKG_MCRE0_CHECK_ENGINE;


GRANT EXECUTE, DEBUG ON MCRE_OWN.PKG_MCRE0_CHECK_ENGINE TO MCRE_USR;

